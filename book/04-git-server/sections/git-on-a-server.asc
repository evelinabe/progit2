[[_getting_git_on_a_server]]
=== Skaffa Git på en server

Nu kommer vi behandla hur man konfigurerar en Gittjänst som använder dessa protokoll på din egen server.

[NOTE]
====
Här kommer vi demonstrera kommandon och steg som krävs för en grundlig och förenklad installation på en Linuxbaserad server, men det är också möjligt att köra dessa på en Mac- eller Windowsserver.
Att konfigurera en produktionsserver inom din infrastruktur kommer säkerligen att medföra skillnader i säkerhetsåtgärder och operativsystemsverktyg, men förhoppningsvis kommer detta ge dig en god inblick av vad som är involverat.
====

För att börja konfigurera en Gitserver måste du exportera ett existerande repo till ett nytt bart repo -- ett repo som inte innehåller en arbetskatalog.
Detta är i regel okomplicerat att göra.
För att klona ditt repo för att skapa ett nytt bart repo, kör du clone-kommandot med flaggan `--bare`.(((git commands, clone, bare)))
Av konvention namnges alltid en bar repokatalog med suffixet `.git`, såhär:

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

Du ska nu ha en kopia av Gitkatalogens data i din `my_project.git`-katalog.

Detta är ungefär likvädigt med

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

Det finns ett antal mindre skillnader i konfigurationsfiilen, men för ditt ändamål är detta nära samma sak.
Den tar Gitrepot i sig själv, utan arbetsträd, och skapar en katalog specifikt för det.

[[_bare_repo]]
==== Lägga det Bara repot på en server

Nu när du har en bar kopia av dit repo är allt du behöver göra att lägga den på en server och konfigurera dina protokoll.
Antag att du har konfigurerat en server som kallas `git.example.com` dit du har SSH-åtkomst och du vill spara alla dina Gitrepon under katalogen `/srv/git`.
Anta att `/srv/git` finns på servern kan du konfigurera ditt nya repo genom att bara kopiera över ditt bara repo:

[source,console]
----
$ scp -r my_project.git user@git.example.com:/srv/git
----

När detta är gjort, kan andra användare som har SSH-baserad läsrättighet till `/srv/git`-katalogen på den servern klona ditt repo genom

[source,console]
----
$ git clone user@git.example.com:/srv/git/my_project.git
----

Om en användare SSH:ar in till en server och skrivrättigheter i `/srv/git/my_project.git`-katalogen kommer de också automatiskt ha rättigheter att skicka upp data till repot.

Gitt kommer automatiskt lägga till gruppskrivrättigheter till ett repo ordentligt om du kör `git init` med flaggan `--shared`.
Notera att du inte kommer att förstöra några versioner, referenser, etc. genom att göra detta.(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared
----

Du ser hur enkelt det är att ta ditt Gitrrepo, skapa en bar kopia och placera det på en server dit du och dina medarbetare har SSH-åtkomst.
Nu är du redo att samarbeta på samma projekt.

Det är viktigt att poängera att detta bokstavligen är allt du behöver göra för att köra en användbar Gitserver dit flera användare har åtkomst -- bara lägg till SSH-tillåtna användare på en server och lägg ett bart repo nånstans dit alla användare har läs- och skrivrättigheter.
Du är färdig -- inget annat behövs.

I kommande avsnitt kommer du få se hur man kan utöka till mera sofistikerade konfigurationer.
Diskussioner kommer inkludera att inte behöva skapa användarkonto för varje användare, lägga till publika läsrättigheter till repon och konfigurera grafiska webbgränssnitt och mer.
Ha dock alltid i åtanke att för att samarbeta med ett par människor på ett privat projekt, är allt du _behöver_ enn SSH-server och ett bart repo.

==== Små uppsättningar

Om du vill köra i liten skala eller bara testar Git i din organisation och bara har ett fåtal utvecklare kan det vara enkelt för dig.
En av de mest komplicerade aspekterna av att konfigurera en Gitserver är användarhantering.
Om du vill att några repon skall vara enbart läsbara för några användare men även skrivbara för andra så kan behörighets- och rättighetskonfiguration vara lite svårare att hantera.

===== SSH-åtkomst

(((serving repositories, SSH)))
Om du har en server dit alla dina utveckare redan har SSH-åtkomst är det generellt sett enklare att konfigurera ditt första repo där, eftersom du nästan inte behöver göra något (som vi beskrev i senaste avsnittet).
Om du vill ha mer komplex rättighetssyrning på dina repon kan du hantera det med filsystemsrättigheter på din servers operativsystem.

Om du vill lägga dina repon på en server som inte har användarkonton för alla i ditt team som du vill ge skrivrättigheter till, måste du sätta upp SSH-åtkomst för dem.
Vi antar att om du har en server att göra dett detta på, har du redan en SSH-server installerad och det är så du kommer åt servern.

Det finns några sätt du kan ge åtkomst till alla i ditt team.
Det första är att konfigurera konton för alla, vilket är enkelt men kan vara omständligt.
Du kanske inte vill köra `adduser` (eller det möjliga alternativet `useradd`) och ställa in temporära lösenord för varje ny användare.

En andra metod är att skapa ett enkelt 'git'-användarkonto på maskinen och be alla användare som har skrivrättigheter att skicka dig sin publika SSH-nyckel och att lägga till den till `~/.ssh/authorized_keys`-filen ov det nya 'git'-användarkontot.
Efter det kommer alla åt maskinen via 'git'-användarkontot.
Detta påverar inte versionsdatan på något sätt -- SSH-användaren du ansluter som påverkar inte versionerna du har sparat.

Ett annat sätt att göra på är att låta din SSH-server autentisera från en LDAP-server eller någon annan centraliserad autentiseringskälla som du kanske redan har konfigurerat.
Så länge som varje användare kan få skalåtkomst på maskinen bör alla SSH-autentiseringsmekanismer du kan tänka på fungera.
