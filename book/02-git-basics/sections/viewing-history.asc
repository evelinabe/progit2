[[_viewing_history]]
=== Visa historiken

Efter att du har skapat flera versioner eller om du har klonat ett förvar med befintlig historik så vill du sannolikt blicka bakåt för att se vad som har hänt.
Det mest grundläggande och kraftfulla verktyget för att göra detta är kommandot `git log`.

Dessa exempel använder ett väldigt simpelt projekt kallat ``simplegit''.
För att hämta projektet, kör

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

När du kör `git log` i projektet, så skall du få en utskrift som ser ut något liknande detta:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Som standard, utan argument, listar `git log` alla förbindningar som är gjorda i förvaret i omvänd kronologisk ordning; det vill säga att de nyaste förbindningarna kommer först.
Som du ser listar kommandot varje förbindning med sin SHA-1 kontrollsumma, författarens namn och e-post, datumet den skrevs och versionsmeddelandet.

Det finns en mängd växlar tillgängliga för `git log` kommandot för att visa exakt det du eftersöker.
Här kommer vi visa några av de vanligaste.

En av de mest hjälpfulla växlarna är `-p` eller `--patch` som visar skillnaden (_patch_ utskriften) som introducerades i varje förbindning.
Du kan också begränsa antalet loggposter som visas genom att skriva `-2` för att bara visa de två senaste posterna.

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Detta val visar samma information men med en diff som följer varje post.
Detta är väldigt användbart för kodgranskning eller att snabbt skumma igenom vad som hänt under en serie av versioner som en medarbetare har lagt till.
Du kan också använda en serie av summerande val tillsammans med `git log`.
Om du till exempel vill se lite kortfattad statistik för varje förbindning använder du växeln `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Som du ser gör kommandot `--stat` att det under varje förbindningspost listas modifierade filer, hur många filer som ändrats och hur många rader i filerna som lades till och togs bort.
Den summerar även informationen på slutet.

En annat väldigt användbar växel är `--pretty`.
Det gör att utskriftern formateras på ett annat sätt än normalt. En del inbyggda val finns tillgängliga att använda.
Valet `oneline` skriver varje version på en rad, och är användbar om du tittar på många versioner.
Sedan finns även valen `short`, `full` och `fuller` som skriver ut i ungefär samma format med mindre respektive mer information:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Det mest spännande valet är `format`, vilket låter dig specificera ditt eget format.
Det är särskilt intressant när du genererar utskrift för tolkning av ett program -- eftersom du specificerar formatet uttryckligen så vet du att det inte kommer att ändras i och med att Git själv uppdateras:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----


<<pretty_format>> listar några av de mer användbara val som `format` hanterar.

[[pretty_format]]
.Användbara val för `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Option   | Description of Output
| `%H`     | Commit hash
| `%h`     | Abbreviated commit hash
| `%T`     | Tree hash
| `%t`     | Abbreviated tree hash
| `%P`     | Parent hashes
| `%p`     | Abbreviated parent hashes
| `%an`    | Author name
| `%ae`    | Author email
| `%ad`    | Author date (format respects the --date=option)
| `%ar`    | Author date, relative
| `%cn`    | Committer name
| `%ce`    | Committer email
| `%cd`    | Committer date
| `%cr`    | Committer date, relative
| `%s`     | Subject
|================================

Du kanske undrar vad som är skillnaden mellan _author_ och _committer_.
Det förra är författare, det vill säga den som ursprungligen gjorde arbetet, medan den senare är den som sparade versionen.
Om du skickare en patch till ett projekt och någon projektmedlem använder din patch, kommer båda ni att anses bidragande till ändringen. -- Du som författare, och projhektmedlemmen som den som sparade versionen.
Vi kommer att gå igenom distinktionen lite mer i <<ch05-distributed-git#ch05-distributed-git>>.

Valen `oneline` och `format` är särskilt användbara tillsammans med ett annat val till `log`, nämligen `--graph`.
Detta valet visar en liten ASCII-graf som visar din versionshistorik:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Denna typen av utskrift blir mer intressant när vi går igenom förgreningar och ihopslagningar i nästa kapitel.

Dessa är bara några av de simpla formateringsvalen till `git log` -- det finns massa fler.
<<log_options>> listar valen som vi täckts hittils och några andra vanliga formateringsval som kan vara användbara, samt hur de förändrar utskriften av kommandot.

[[log_options]]
.Vanliga val till `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
| `--oneline`       | Shorthand for `--pretty=oneline --abbrev-commit` used together.
|================================

==== Begränsa utskriften från log

Utöver formateringsvalen tar kommandot `git log` även ett antal användbara begränsande val; det vill säga val som låter dig visa ett urval av versioner.
Du har redan sett ett sånt val -- valet `-2`, som enbart visar de två senaste sparade versionerna.
Faktum är att du kan göra `-<n>`, där `n` är ett heltal för att visa de `n` senaste sparade versionerna.
I realiteten kommer du förmodligen inte använda detta särskilt ofta eftersom Git normalt skickar utskrifterna till en paginator, så att du endast ser en sida av utskrifter åt gången.

Dock så är de tidsbegränsande valen såsom `--since` och `--until` även väldigt användbara.
Till exempel ger dig detta kommando en lista över sparade versioner de senaste två veckorna:

[source,console]
----
$ git log --since=2.weeks
----

Detta kommando fungerar tillsamans med en mängd format -- du kan specificera ett specifikt datum som till exempel `"2008-01-15"`, eller ett relativt datum som till exempel `"2 years 1 day 3 minutes ago"`.

Du kan ocksåm filtrera listan över versioner som uppfyller ett sökvillkor.
Valet `--author` låter dig filtrera på en särskild författare och `--grep` låter dig söka efter nyckelord i versionsmeddelanden.

[NOTE]
====
Du kan specificera mer än en instans av både `--author` och `--grep`, vilket kommer begränsa versionsutskrifterna till de versioner som uppfyller _något_ av textmönstren för `--author` och _något_ av textmönstren för `--grep`; man kan även lägga till valet `--match-all` för att ytterligare begränsa utskriften till bara de sparade versioner som uppfyller _alla_ `--grep` mönster.
====

Et annat tacksamt filter är `-S` (allmänt känt som Gits ``hacka''), som tar en textsträng och enbart visar de sparade versioer som ändrade antalet förekomster av den textsträngen.
Om du till exempel vill hitta den senaste versionen som lade till eller tog bort en referens till en specifik funktion, skulle du kunna skriva:

[source,console]
----
$ git log -S function_name
----

Det sista verkligt användbara valet att skicka till `git log` som ett filter är en sökväg.
Om du specificerar en katalog eller ett filnamn kan du begränsa utskriften till versioner som introdicerade en ändring i de filerna.
Detta är alltid det sista valet och föregås generellt av två dubbelstreck (`--`) för att separera sökvägarna från valen.

I <<limit_options>> listas dessa och ett fåtal andra vanliga val för referens.

[[limit_options]]
.Val för att begränsa utskriften av `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-<n>`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

Till exempel, om du bara vill se vilka versioner som modifierade testfiler i Gits källkodshistorik som sparades av Junio Hamano under oktober 2008 och som inte är sammanslagningsversioner, kan du köra något liknande detta:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Av de nästan 40 000 sparade versionerna i Gits källkodshistorik listar detta kommando de 6 versioner som uppfyller dessa kriterierna.

[TIP]
.Förhindra visning av sammanslagningsversioner
====
Beroende på det arbetsflöde du använder i ditt förvar är det möjligt att en ansenlig andel av de sparade versionerna i din historik är just sammanslagningsversioner, vilka typiskt inte är särskilt informativa.
För att förhindra att sammanslagningsversioner gör din historik svårläslig, lägg bara till valet `--no-merges`.
====
