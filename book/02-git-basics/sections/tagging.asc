[[_git_tagging]]
=== Taggning

(((tags)))
Likt de flesta versionshanteringssystem har Git möjligheten att tagga en specifik punkt i ett förvars historik som viktig.
Typiskt använder folk denna funktionaliteten för att markera frisläppt version (`v1.0`, `v2.0` och så vidare).
I detta avsnitt kommer du lära dig hur man listar existerande taggar, att skapa och ta bort taggar, samt vilka olika typer av taggar som finns.

==== Lista dina taggar

Att list existerande taggar i Git är rättframt.
Skriv bara `git tag` (med valfri `-l` eller `--list`):(((git commands, tag)))

[source,console]
----
$ git tag
v1.0
v2.0
----

Kommandot listar taggarna i alfabetisk ordning; ordningen i vilken de står spelar ingen roll.

Du kan också söka efter taggar som matchar ett specifikt mönster.
Gits eget källkodsförvar innehåller till exempel mer än 500 taggar.
Om du är intresserad av serien 1.8.5 kan du göra såhär:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

[NOTE]
.Lista taggar med jokertecken kräver flaggan `-l` eller `--list`
====
Om du bara vill ha hela listan över taggar, antar kommandot `git tag` att du vill ha en listning och den ger dig det; att använda `-l` eller `--list` i detta fallet är därför valfritt.

Om du däremot vill lista med jokertecken för att matcha taggnamn måste du använda `-l` eller `--list`.
====

==== Skapa taggar

Git stödjer två typer av taggar: _lättviktig_ och _kommenterad_.

En lättviktig tagg är väldigt lik en gren som inte ändras -- det är bara en pekare till en specifik ögonblicksbild/version.

Kommenterade taggar däremot, sparas som fullvärdiga objekt i Git-databasen.
De förses med en checksumma; innehåller namnet på den som taggat, e-post och tidsstämpel; har ett taggningsmeddelande och kan signeras med GNU Privacy Guard (GPG).
Generellt rekommenderas att du skapar en kommenterad tagg så att du kan ha all denna information, men om du bara vill ha en temporär tagg eller av någon anledning inte vill ha informationen, så kan du använda lättviktiga taggar.

[[_annotated_tags]]
==== Kommenterade taggar

(((tags, annotated)))
Att skapa en kommenterad tagg i Git är enkelt.
Enklast är att specificera `-a` när du kör kommandot `tag`:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

Flaggan `-m` specificerar taggningsmeddelandet som sparas tillsamans med taggen.
Om du inte specificerar ett meddelande för din kommenterade tagg, startar Git din editor så att du kan skriva in det.

Du kan se taggdata tillsammans med ögonblicksbilden som blev taggad genom kommandot `git show`:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Den visar tagginformation, tidsstämpeln för då ögonblicksbilden taggades, och meddelandet innan den visar informationen om ögonblicksbilden.

==== Lättviktiga taggar

(((tags, lightweight)))
Ett annat sätt att tagga ögonblicksbilder är en lättviktig tagg.
Det är i grunden checksumman för ögonblicksbilden sparad i en fil -- ingen annan information sparas.
För att skapa en lättviktig tagg, så utelämnar du bara växlarna `-a`, `-s`, eller `-s`, ange bara ett taggnamn:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

Om du denna gång kör `git show` på taggen så kommer du inte se någon extra tagginformation.(((git commands, show)))
Kommandot visar bara ögonblicksbilden:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Tagga senare

Du kan även tagga ögonblicksbilder efter att du flyttat förbi dem.
Anta att din versionshistorik ser ut såhär:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Anta att du glömt tagga projetet vid v1.2 som var vid versionen ``updated rakefile''.
Du kan lägga till den efteråt.
För att tagga den ögonblicksbilden, så specificerar du checksumman (eller en del av den) i slutet av kommandot:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

Du kan nu se att versionen blivit taggad:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Dela taggar

Normalt skickas inte taggar till fjärrförvar när du kör `git push`.(((git commands, push)))
Du måste uttryckligen skicka upp taggar till en delad server efter att du skapat dem.
Processen är densamma som för att dela fjärrgrenar -- du kan köra `git push origin <tagname>`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Om du har många taggar som du vill skicka upp samtidig, kan du också ange växeln `--tags` till kommandot `git push`.
Detta kommer att skicka alla dina taggar till servern som inte redan finns där.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Nu, om någon annan klonar eller hämtar hem data från fjärrförvaret kommer de få med dina taggar också.

[NOTE]
.`git push` skickar båda typer av taggar
====
Att skicka taggar med `git push <remote> --tags` skiljer inte på lättviktiga och kommenterade taggar, och det finns inget lätt sätt som låter dig skicka enbart den ena typen av taggar.
====

==== Ta bort taggar

För att ta bort taggar i ditt lokala förvar så använder du `git tag -d <tagname>`.
Du kan till exempel ta bort vår lättviktiga tagg såhär:

[source,console]
----
$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)
----

Notera att detta inte tar bort taggen från några fjärrförvar.
Det finns två vanliga sätt att ta boort taggar från fjärrförvar.

Den första sättet är `git push <fjärrnamn> :refs/tags/<taggnamn>`:

[source,console]
----
$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw
----

Ovanstående skall tolkas som att null-värdet före kolonet skickas till serverns taggnamn, vilket i praktiken tar bort taggen.

Det andra (och mer intiutiva) sättet att ta bort en tagg i fjärrförvaret är med:

[source,console]
----
$ git push origin --delete <taggnamn>
----

==== Checka ut taggar

Om du vill visa versionenra av filerna som en tagg pekar på kan du köra `git checkout` på den taggen. Ditt förvar försätts då i tillståndet ``detached HEAD'', som har några bieffekter:

[source,console]
----
$ git checkout 2.0.0
Note: checking out '2.0.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch>

HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final

$ git checkout 2.0-beta-0.1
Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final
HEAD is now at df3f601... add atlas.json and cover image
----

I tillståndet ``detached HEAD'' kan du göra ändringar och spara versioner som vanligt, men taggen kommer inte att ändras och dina sparade versioner kommer inte att tillhöra någon gren och därför vara praktiskt onåbara, förutom via sina checksummor. Så om du vill göra ändringar -- till exempel fixa en bugg i en gammal version -- så vill du skapa en gren:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Om du gör detta och sedan sparar en version, kommer din gren `version2` att skilja sig från din tagg `v2.0.0` eftersom den kommer att flyttas fram tillsammans med dina ändringar, så var försiktig.
