[[_getting_a_repo]]
=== Skaffa ett Git-förvar

Vanligtvis skaffar du ett Git-förvar på något av dessa två sätt:

1. Du tar en lokal mapp som för närvarande inte är versionskontrollerat, och gör den till ett Git-förvar, eller
2. Du kan _klona_ ett existerande förvar från någonstans.

Vilket du än väljer, så har du i slutändan ett lokalt förvar på din dator, redo att arbeta med.

==== Initialisera ett förvar i en befintlig mapp

Om du har en projektmapp som för närvarande inte är versionskontrollerat och du vill börja hantera det med Git ställer du dig först i katalogen i fråga.
Det ser lite olika ut beroende på vilket operativsystem du använder:

i Linux:
[source,console]
----
$ cd /home/user/my_project
----
på Mac:
[source,console]
----
$ cd /Users/user/my_project
----
i Windows:
[source,console]
----
$ cd /c/user/my_project
----

och skriv:

[source,console]
----
$ git init
----

Detta skapar en ny underkatalog som heter `.git` som innehåller alla nödvändiga filer -- ett skelett för Git-förvaret.
Ännu så länge är inget i ditt projekt spårat.
(Se <<ch10-git-internals#ch10-git-internals>> för mer information om exakt vilka filer som finns i `.git` katalogen du nyss skapade.)(((git commands, init)))

Om du vill börja versionshantera existerande filer (till skillnad från en tom mapp), skall du förmodligen spåra filerna och göra en första version.
Du kan åstadkomma det med ett fåtal `git add` kommandon som specificerar de filer du vill spåra, följt av kommandot `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial projektversion'
----

Vi kommer gå igenom vad dessa kommandon inom kort.
Nu har du ett Git-förvar med spårade filer och en första version (commit).

[[_git_cloning]]
==== Klona ett existerande förvar

Om du vill ha en kopia av ett existerande Git-förvar -- till exempel för ett projekt som du gärna vill bidra till -- så behöver du kommandot `git clone`.
Om du känner till andra versionshanteringssystem som t.ex. Subversion, kommer du notera att kommandot är "clone" och inte "checkout".
Det finns en viktig distinktion -- istället av att få en arbetskopia, får Git en fullständig kopia av i princip all data som servern har.
Varje version av filen för hela projektets historia hämtas normalt när du kör `git clone`.
Ifall serverns disk blir korrupt kan du i själva verket ofta använda nästan vilken klon som helst på någon klient för att återskapa all information som servern hade då förvaret klonades (man kan förlora några krokar på serversidan och liknande, men all versionshanterad data kommer att finnas -- se <<ch04-git-on-the-server#_getting_git_on_a_server>> för mer detaljer).

Du klonar ett förvar med `git clone <url>`.(((git commands, clone)))
Om du till exempel vill klona det Git-länkade förvaret kallat `libgit2`, kan du göra såhär:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Det skapar en mapp kallad `libgit2`, initierar en `.git`-mapp inuti den, hämtar all data för det förvaret, och checkar ut en arbetskopia av den senaste versionen.
Om du går ner i `libgit2`-mappen som nyss skapades kommer du se projektfilerna där, redo att arbeta på eller användas.

Om du vill klona förvaret till en mapp som heter något annat än `libgit2`, går det att specificera den nya mappens namn som ett extra argument:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Det kommandot gör samma sak som det tidigare, men målmappen kallas `mylibgit`.

Git har ett flertal olika överföringsprotokoll du kan använda.
Det föregående exemplet använder `https://`-protokollet men du kan också hitta `git://` och `användare@server:sökväg/till/förvar.git`, som använder överföringsprotokollet SSH.
<<ch04-git-on-the-server#_getting_git_on_a_server>> kommer introducera alla tillgängliga val som servern kan konfigurara för att komma åt dit Git-förvar, samt för- och nackdelarna med de olika valen.
