[[_git_aliases]]
=== Git alias

(((aliases)))
Innan vi avslutar detta kapitel om grundläggande Git, finns det ett litet tips som kan göra din upplevelse av Git lite enklare och mer bekant: alias.
Vi kommer inte referera till dem eller anta att du använt dem tidigare i boken, men du bör förmodligen veta hur du använder dem.

Git kommer inte automatiskt anta vilket kommando du vill köra om du bara delvis skriver ut det.
Om du inte vill skriva hela texten för varje Git-kommandoi, kan du enkelt ställa in ett alias för varje kommando genom att använda `git config`.(((git commands, config)))
Här är några exempel som du kanske vill använda:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Detta betyder att istället för att skriva `git commit` kan du istället skriva `git ci`.
Ju mer du använder Git, så kommer du förmodligen använda andra kommandon flitigt; tveka inte att skapa nya alias för dem.

Denna tekniken kan också vara användbar för att skapa kommandon som du tycker borde existera.
För att korrigera ett användbarhetsproblem som du påträffat när du tar bort en fil från prepareringsytan kan du lägga till ditt eget kommando för detta scenario:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Detta gör följande kommandon ekvivalenta:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Det blir lite klarare.
Det är också vanligt att lägga till ett `last` kommando som detta:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Nu kan du lätt se den senaste versionen:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Precis som du ser, kommer Git att ersätta det nya kommandot med vad det är alias för.
Kanske vill du köra ett externt kommando istället för ett Git-subkommando.
I så fall startar du kommandot med ett `!` tecken.
Det är användbart om du skiver egna verktyg som fungerar med ett Gitförvar.
Vi kan demonstrera genom att lägga till kommandot `git visual` för att köra `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
